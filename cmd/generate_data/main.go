package main

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"os"
	"path/filepath"
	"strings"
	"time"

	gendata "github.com/CakeForKit/GinFiberBenchmarks.git/internal/gen_data"
	"github.com/CakeForKit/GinFiberBenchmarks.git/internal/models"
)

const (
	FLAT_AMMO_FILENAME      = "./requests/ammo/flat_ammo.json"
	HEIRARCHY_AMMO_FILENAME = "./requests/ammo/hierarchy_ammo.json"
	DEEP_AMMO_FILENAME      = "./requests/ammo/deep_ammo.json"
	count_different_ammo    = 5
	levels_in_tree          = 7
)

func main() {
	{
		flat_ammo, err := gendata.GenerateFlatAmmo(count_different_ammo)
		if err != nil {
			panic(err)
		}
		ammoJSON, err := json.MarshalIndent(flat_ammo, "", "  ")
		if err != nil {
			panic(fmt.Sprintf("Error marshaling ammo: %v", err))
		}
		if err := os.WriteFile(FLAT_AMMO_FILENAME, ammoJSON, 0644); err != nil {
			log.Fatalf("Error writing ammo file: %v", err)
		}

		fmt.Println("Flat ammo file with generated!")
	}
	{
		hierarchy_ammo, err := gendata.GenerateFlatHierarchyAmmo(count_different_ammo)
		if err != nil {
			panic(err)
		}
		ammoJSON, err := json.MarshalIndent(hierarchy_ammo, "", "  ")
		if err != nil {
			panic(fmt.Sprintf("Error marshaling ammo: %v", err))
		}
		if err := os.WriteFile(HEIRARCHY_AMMO_FILENAME, ammoJSON, 0644); err != nil {
			log.Fatalf("Error writing ammo file: %v", err)
		}

		fmt.Println("Hierarchy ammo file with generated!")
	}
	{
		deep_ammo, err := gendata.GenerateDeepAmmo(count_different_ammo, levels_in_tree)
		if err != nil {
			panic(err)
		}
		ammoJSON, err := json.MarshalIndent(deep_ammo, "", "  ")
		if err != nil {
			panic(fmt.Sprintf("Error marshaling ammo: %v", err))
		}
		if err := os.WriteFile(DEEP_AMMO_FILENAME, ammoJSON, 0644); err != nil {
			log.Fatalf("Error writing ammo file: %v", err)
		}

		fmt.Println("Deep ammo file with generated!")
	}
}

func main1() {
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	outputDir := "json_data"
	if err := os.MkdirAll(outputDir, 0755); err != nil {
		panic(fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %v", err))
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
	// timestamp := time.Now().Format("20060102_150405")

	// 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–∏–π JSON —Å–æ 100 –ø–æ–ª—è–º–∏
	flatJSON, err := models.GenerateFlatStructJSON()
	if err != nil {
		panic(err)
	}
	flatFilename := filepath.Join(outputDir, fmt.Sprintf("flat_struct.json"))
	if err := saveJSONToFile(flatJSON, flatFilename); err != nil {
		panic(err)
	}
	fmt.Printf("=== –ü–õ–û–°–ö–ò–ô JSON (100 –ø–æ–ª–µ–π) ===\n")
	fmt.Printf("–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤: %s\n", flatFilename)
	fmt.Printf("–†–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n\n", len(flatJSON))

	// 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π JSON
	levelsInTree := 6
	deepJSON, err := models.GenerateDeepNestedJSON(levelsInTree)
	if err != nil {
		panic(err)
	}
	deepFilename := filepath.Join(outputDir, fmt.Sprintf("deep_nested.json"))
	if err := saveJSONToFile(deepJSON, deepFilename); err != nil {
		panic(err)
	}
	fmt.Printf("=== –ì–õ–£–ë–û–ö–û –í–õ–û–ñ–ï–ù–ù–´–ô JSON ===\n")
	fmt.Printf("–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤: %s\n", deepFilename)
	fmt.Printf("–£—Ä–æ–≤–Ω–µ–π –≤ –¥–µ—Ä–µ–≤–µ: %d\n", levelsInTree)
	fmt.Printf("–†–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n\n", len(deepJSON))

	// 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–æ—Å–∫—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é
	hierarchyJSON, err := models.GenerateFlatHierarchyJSON()
	if err != nil {
		panic(err)
	}
	hierarchyFilename := filepath.Join(outputDir, fmt.Sprintf("flat_hierarchy.json"))
	if err := saveJSONToFile(hierarchyJSON, hierarchyFilename); err != nil {
		panic(err)
	}
	fmt.Printf("=== –ü–õ–û–°–ö–ê–Ø –ò–ï–†–ê–†–•–ò–Ø ===\n")
	fmt.Printf("–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤: %s\n", hierarchyFilename)
	fmt.Printf("–†–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n\n", len(hierarchyJSON))

	// –í—ã–≤–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
	fmt.Println(strings.Repeat("=", 50))

	// –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	fmt.Printf("\nüìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: %s/\n", outputDir)
	fmt.Printf("üìä –ò—Ç–æ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:\n")
	fmt.Printf("   ‚Ä¢ –ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: %s\n", filepath.Base(flatFilename))
	fmt.Printf("   ‚Ä¢ –ì–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π JSON: %s\n", filepath.Base(deepFilename))
	fmt.Printf("   ‚Ä¢ –ü–ª–æ—Å–∫–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è: %s\n", filepath.Base(hierarchyFilename))
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON –≤ —Ñ–∞–π–ª
func saveJSONToFile(data []byte, filename string) error {
	return os.WriteFile(filename, data, 0644)
}

func mainprint() {
	rand.New(rand.NewSource(time.Now().UnixNano()))

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–∏–π JSON —Å–æ 100 –ø–æ–ª—è–º–∏
	flatJSON, err := models.GenerateFlatStructJSON()
	if err != nil {
		panic(err)
	}
	fmt.Println("=== –ü–õ–û–°–ö–ò–ô JSON (100 –ø–æ–ª–µ–π) ===")
	fmt.Println(string(flatJSON))
	fmt.Println("\n" + strings.Repeat("=", 50) + "\n")

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π JSON
	levelsInTree := 6
	deepJSON, err := models.GenerateDeepNestedJSON(levelsInTree)
	if err != nil {
		panic(err)
	}
	fmt.Println("=== –ì–õ–£–ë–û–ö–û –í–õ–û–ñ–ï–ù–ù–´–ô JSON ===")
	fmt.Println(string(deepJSON))
	fmt.Println("\n" + strings.Repeat("=", 50) + "\n")

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–æ—Å–∫—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é
	hierarchyJSON, err := models.GenerateFlatHierarchyJSON()
	if err != nil {
		panic(err)
	}
	fmt.Println("=== –ü–õ–û–°–ö–ê–Ø –ò–ï–†–ê–†–•–ò–Ø ===")
	fmt.Println(string(hierarchyJSON))
}
